.cpp %%
namespace Message { 
%%
.cs %%
namespace Message { 
%%

enum ErrorCode
{
	Success = 0,
	MessageFormatError = 1000,
	MessageSeqOmmitError = 1001,
	InvalidUserError = 2000,
	InvalidAccessTokenError = 2001,
	InvalidSeviceName = 2002,
	DuplicateConnectionError = 3000,
	ReconnectTimeoutError = 4000,
	ResponseTimeoutError = 4001,
	AlreadyLoginSessionError = 5000,
	CanNotCreateCastGroup = 5001,
	DuplicateNameError,
	CreateAccountError,
	InvalidItemID,
	InvalidItemIndex,
	InvalidItemSEQ,
	UndefineError = 99999,
};

enum AccountType
{
	Invalid,
	Dev = 1,
	Google = 2,
	Apple = 3,
	Facebook = 4
};

enum AccountState
{
	Invalid,
	Normal,
	Penalty,
	OnDelete,
	Deleted
};

enum CounterType
{
	Invalid = 0,
	Gold = 1,
	Cash = 2,
};

enum ItemType
{
	Invalid,
	Equip,
	Package,
};

enum EquipItemPartType
{
	Invalid,
	Cloak,
	Legs,
	Body,
	Boots,
	Head,
	Gloves,
	LeftHand,
	RightHand,
	Max
};

enum DungeonTileType
{
	Invalid,
	Floor,
	Wall,
	Door,
	StairDown,
	StairUp
};

struct MailData
{
	uint64 mail_seq;
	string mail_message;
	uint64 expire_date;
	uint32 item_index;
	uint32 item_count;
};

struct CounterData
{
	CounterType counter_type;
	int64 counter_value;
	uint64 update_time;
};

struct ItemData
{
	int64 item_no;
	int32 item_index;
	int32 item_count;
};

struct EquipItemData(ItemData)
{
	EquipItemPartType part_type;
};

struct UserData
{
	int64 user_no;
	string user_name;
	list<ItemData> bag;
	list<EquipItemData> suit;
	list<CounterData> counter;
};

struct Vector2Int
{
.cpp %%
	Vector2Int(int x, int y)
		: x(x), y(y)
	{
	}	
%%
	int32 x;
	int32 y;
};

struct Monster
{
	uint64 seq;
	Vector2Int position;
};

struct Player
{
	uint64 unit_seq;
	Vector2Int position;
	list<uint32> equip_items; // equip item index
};
.cpp %%
}
%%

.cs %%
}
%%