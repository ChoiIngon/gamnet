.cpp %%
namespace Gamnet { namespace Network { namespace Router {
%%
enum ROUTER_CAST_TYPE
{
	UNI_CAST,
	MULTI_CAST,
	ANY_CAST,
	MAX	
};

struct Address
{
	.cpp %%
	Address(ROUTER_CAST_TYPE _cast_type, const std::string& _service_name, uint32_t _id)
		: service_name(_service_name), cast_type(_cast_type), id(_id), msg_seq(0)
	{
	}
	%%
	string service_name;
	ROUTER_CAST_TYPE cast_type;
	uint32 id;
	uint64 msg_seq;
};
 
.cpp %%
inline bool operator < (const Address& lhs, const Address& rhs)
{
	if(lhs.id < rhs.id)
	{
		return true;
	}
	else if(lhs.id == rhs.id)
	{	
		if(lhs.service_name < rhs.service_name)
		{
			return true;
		}
		else if(lhs.service_name == rhs.service_name)
		{
			if((int)lhs.cast_type < (int)rhs.cast_type)
			{
				return true;
			}
		}
	}
	return false;
}
inline bool operator == (const Address& lhs, const Address& rhs)
{
	if(lhs.service_name != rhs.service_name || (int)lhs.cast_type != (int)rhs.cast_type || lhs.id != rhs.id)
	{
		return false;
	}	
	return true;
}
inline bool operator != (const Address& lhs, const Address& rhs)
{
	if(lhs.service_name != rhs.service_name || (int)lhs.cast_type != (int)rhs.cast_type || lhs.id != rhs.id)
	{
		return true;
	}	
	return false;
}
%%

message MsgRouter_SetAddress_Req : 	00001
{
	Address local_address;
};

message MsgRouter_SetAddress_Ans : 	00002
{
	int32 error_code;
	Address remote_address; 
};

message MsgRouter_SetAddress_Ntf : 	00003
{
};

message MsgRouter_SendMsg_Ntf : 	00004
{
	uint32 msg_seq;
	string buffer;
};

message MsgRouter_HeartBeat_Ntf :	00005
{
};
.cpp %%
}}}
%%
