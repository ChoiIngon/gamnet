enum ROUTER_ERROR_CODE
{
	ROUTER_ERROR_SUCCESS,
	ROUTER_ERROR_MESSAGE_FORMAT_ERROR
};

enum ROUTER_CAST_TYPE
{
	ROUTER_CAST_UNI,
	ROUTER_CAST_MULTI,
	ROUTER_CAST_ANY,
	ROUTER_CAST_MAX	
};

struct Address
{
	string service_name;
	ROUTER_CAST_TYPE cast_type;
	uint32 id;
	uint64 msg_seq;
};
 
.cpp %%
inline bool operator < (const Address& lhs, const Address& rhs)
{
	if(lhs.id < rhs.id)
	{
		return true;
	}
	else if(lhs.id == rhs.id)
	{	
		if(lhs.service_name < rhs.service_name)
		{
			return true;
		}
		else if(lhs.service_name == rhs.service_name)
		{
			if(lhs.cast_type < rhs.cast_type)
			{
				return true;
			}
		}
	}
	return false;
}
inline bool operator == (const Address& lhs, const Address& rhs)
{
	if(lhs.service_name != rhs.service_name ||
	   lhs.cast_type != rhs.cast_type ||
	   lhs.id != rhs.id
	)
	{
		return false;
	}	
	return true;
}
inline bool operator != (const Address& lhs, const Address& rhs)
{
	if(lhs.service_name != rhs.service_name ||
	   lhs.cast_type != rhs.cast_type ||
	   lhs.id != rhs.id
	)
	{
		return true;
	}	
	return false;
}
%%

message MsgRouter_SetAddress_Req : 	00001
{
	Address tLocalAddr;
};

message MsgRouter_SetAddress_Ans : 	00002
{
	uint16 nErrorCode;
	Address tRemoteAddr; 
};

message MsgRouter_SetAddress_Ntf : 	00003
{
};

message MsgRouter_SendMsg_Ntf : 	00004
{
	uint64 nKey;
	string sBuf;
};